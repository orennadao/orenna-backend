user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;  # Allow large evidence file uploads

    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    # Rate limiting for API endpoints
    limit_req_zone $binary_remote_addr zone=ipfs_api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=ipfs_gateway:10m rate=50r/s;

    # Upstream definitions
    upstream ipfs_api {
        least_conn;
        server ipfs-node1:5001 weight=2 max_fails=3 fail_timeout=30s;
        server ipfs-node2:5001 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream ipfs_gateway {
        least_conn;
        server ipfs-node1:8080 weight=2 max_fails=3 fail_timeout=30s;
        server ipfs-node2:8080 weight=1 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # IPFS API Load Balancer (Internal)
    server {
        listen 5001;
        server_name ipfs-api.orenna.internal;

        # Security headers
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";

        # Rate limiting
        limit_req zone=ipfs_api burst=20 nodelay;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # IPFS API proxy
        location / {
            proxy_pass http://ipfs_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts for large file uploads
            proxy_connect_timeout 60s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Buffer settings
            proxy_buffering off;
            proxy_request_buffering off;
        }
    }

    # IPFS Gateway Load Balancer (Public)
    server {
        listen 80;
        server_name ipfs.orenna.com;

        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name ipfs.orenna.com;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/ipfs.orenna.com.crt;
        ssl_certificate_key /etc/nginx/ssl/ipfs.orenna.com.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;

        # Security headers
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";

        # Rate limiting
        limit_req zone=ipfs_gateway burst=100 nodelay;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # IPFS Gateway proxy
        location / {
            proxy_pass http://ipfs_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache settings for IPFS content
            proxy_cache_valid 200 1h;
            proxy_cache_valid 404 5m;
            add_header X-Cache-Status $upstream_cache_status;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Special handling for verification evidence
        location /ipfs/ {
            proxy_pass http://ipfs_gateway;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Longer cache for IPFS content (immutable)
            proxy_cache_valid 200 24h;
            proxy_cache_valid 404 1h;
            add_header X-Cache-Status $upstream_cache_status;
            add_header Cache-Control "public, max-age=86400, immutable";
            
            # Security for evidence files
            add_header X-Evidence-Source "orenna-verification-system";
        }
    }

    # Metrics endpoint for monitoring
    server {
        listen 8090;
        server_name localhost;

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }
    }
}