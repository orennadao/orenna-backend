generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  username  String?
  ensName   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions Session[]
}

model Session {
  id        String   @id
  userId    Int
  token     String   @unique
  expiresAt DateTime
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Project {
  id              Int      @id @default(autoincrement())
  name            String
  slug            String   @unique
  description     String?
  ownerAddress    String?
  chainId         Int?
  contractAddress String?
  meta            Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  liftUnits LiftUnit[]
}

model LiftUnit {
  id              Int     @id @default(autoincrement())
  externalId      String? @unique
  tokenId         String? @unique
  contractAddress String?
  chainId         Int?

  status   String   @default("DRAFT")
  quantity Decimal?
  unit     String?

  projectId Int?
  project   Project? @relation(fields: [projectId], references: [id])

  meta      Json?
  issuedAt  DateTime?
  retiredAt DateTime?

  events LiftUnitEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([tokenId])
  @@index([contractAddress])
  @@index([chainId])
}

model LiftUnitEvent {
  id         Int    @id @default(autoincrement())
  liftUnitId Int
  type       String

  txHash      String?
  blockNumber Int?
  logIndex    Int?

  payload Json?
  meta    Json?
  eventAt DateTime @default(now())

  liftUnit LiftUnit @relation(fields: [liftUnitId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([liftUnitId, type, txHash])
  @@index([liftUnitId, type])
  @@index([txHash])
}

model Contract {
  id         Int       @id @default(autoincrement())
  name       String
  symbol     String?
  address    String
  chainId    Int
  type       String
  abi        Json?
  deployedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([address, chainId])
  @@index([chainId, type])
}
